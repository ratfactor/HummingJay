<?php
namespace HummingJay;

class TestResource extends Resource{
    // For testCallMethod

    public function get($server){
        $server->title = "Sitting Still Like a Frog";
        return $server;
    }
} 

class OptionsTestResource extends Resource{
    public $title = "Little Women";
    public $description = "The story of four sisters who share it all.";

    public function get($server){}
    public function post($server){}
}

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-06-19 at 22:02:00.
 */
class ResourceTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Resource
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers HummingJay\Resource::callMethod
     * @todo   Implement testCallMethod().
     */
    public function testCallMethod()
    {
        $server = new Server("");
        $server->method = "GET";
        $tr = new TestResource($server);
        $server = $tr->callMethod($server);

        $this->assertEquals(
            "Sitting Still Like a Frog",
            $server->title,
            "Returned title verifies that the get handler of our test resource was called."
        );

    }

    /**
     * @covers HummingJay\Resource::callMethod
     * @todo   Implement testCallMethod().
     */
    public function testCallMethod405()
    {
        $server = new Server("");
        $server->method = "POST";
        $tr = new TestResource($server);
        $server = $tr->callMethod($server);

        $this->assertEquals(
            405,
            $server->httpStatus,
            "Returned 405 error because POST method not supported."
        );

    }


    /**
     * @covers HummingJay\Resource::testHalt
     * @todo   Implement testHalt().
     */
    public function testHalt()
    {
        $server = new Server("");
        $server->method = "GET";
        $server->title = "As I Lay Dying";
        $tr = new TestResource($server);
        $tr->halt();
        $server = $tr->callMethod($server);

        $this->assertEquals(
            "As I Lay Dying",
            $server->title,
            "Returned title verifies that the get handler of our test resource was NOT called."
        );

    }



    /**
     * @covers HummingJay\Resource::options
     * @todo   Implement testOptions().
     */
    public function testOptions()
    {
        $hj = new HummingJay(null, new Server());
        $routes = $hj->parseRouteString("/admins - x
/users - x
/users/reports - Me
/users/reports/usage - x
/users/inventory - x");


        $server = new Server();
        $server->all_api_routes = $routes;
        $server->uri = "/users/reports";

        $res = new OptionsTestResource($server);
        $server = $res->options($server);

        $this->assertEquals(
            "Little Women",
            $server->hyperTitle,
            "Returned title verifies that Options of our test resource were parsed correctly."
        );

        $this->assertEquals(
            "The story of four sisters who share it all.",
            $server->hyperDescription,
            "Returned description verifies that Options of our test resource were parsed correctly."
        );

        //print_r($server->hyperLinks);

        $this->assertArraySubset(
            [0=>["rel"=>"parent", "href"=>"/users"]],
            $server->hyperLinks,
            "Hyperlinks contains parent link"
        );

        $this->assertArraySubset(
            [1=>["rel"=>"child", "href"=>"/users/reports/usage"]],
            $server->hyperLinks,
            "Hyperlinks contains childern"
        );

        $this->assertArraySubset(
            [2=>["rel"=>"self", "method"=>"OPTIONS"]],
            $server->hyperLinks,
            "Hyperlinks contains OPTIONS method link"
        );

        $this->assertArraySubset(
            [3=>["rel"=>"self", "method"=>"GET"]],
            $server->hyperLinks,
            "Hyperlinks contains GET method link"
        );

        $this->assertArraySubset(
            [4=>["rel"=>"self", "method"=>"POST"]],
            $server->hyperLinks,
            "Hyperlinks contains POST method link"
        );


    }

    /**
     * @covers HummingJay\Resource::parentUri
     * @todo   Implement testParentUri().
     */
    public function testParentUri()
    {
        $tr = new TestResource(new Server(""));
        
        $this->assertEquals(
            "/users",
            $tr->parentUri("/users/report"),
            "Returned expected parent two levels"
        );


        $this->assertEquals(
            "/",
            $tr->parentUri("/users"),
            "Returned expected parent one level"
        );

        $this->assertEquals(
            "/",
            $tr->parentUri("/"),
            "Retured expected parent no levels"
        );

        $this->assertEquals(
            "/users/report/sectionA/sub_section2/block2b",
            $tr->parentUri("/users/report/sectionA/sub_section2/block2b/paragraph12"),
            "Returned expected parent six levels down"
        );


        $this->assertEquals(
            "/users",
            $tr->parentUri("/users/{uid}"),
            "Retured expected parent no levels"
        );


    }





}


// Test callMethod