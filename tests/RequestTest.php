<?php
namespace HummingJay;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-06-19 at 22:02:00.
 */
class RequestTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Request
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        //Sending a blank string to indicate that we don't want data to 
		//come from the server.
        $this->object = new Request('');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers HummingJay\Request::decodeJson
     */
    public function testDecodeJson()
    {
        $this->object->rawData = "";
        $this->object->decodeJson();
		$this->assertEquals (
        	true,
        	$this->object->dataWasEmpty,
        	"dataWasEmpty is true if given a blank string."
    	); 


		$this->object->rawData = "I will break you.";
        $this->object->decodeJson();
	    
	    $this->assertEquals (
	    	false,
	    	$this->object->dataWasEmpty,
	    	"dataWasEmpty is false if given a string."
		);
       
        $this->assertEquals (
        	'Syntax error, malformed JSON',
        	$this->object->jsonMessage,
        	"Verify jsonMessage is set when given invalid JSON"
    	); 
       
        $this->assertEquals (
        	JSON_ERROR_SYNTAX,
        	$this->object->jsonError,
        	"Verify jsonError is set when given invalid JSON"
    	); 
    	
    	$this->assertEquals (
        	null,
        	$this->object->data,
        	"Data should be null if no JSON data is given"
    	); 
       
    	$this->object->rawData = '{"animal":"cat"}';
        $this->object->decodeJson();

        $this->assertEquals (
            'cat',
            $this->object->data->animal,
            "Requsted JSON Data was good."
        ); 


    }


    /**
     * @covers HummingJay\Request::extractApiUri
     */
    public function testExtractApiUri()
    {
        $this->assertEquals (
            '/',
            $this->object->extractApiUri("/api/v1/", "/api/v1/index.php"),
            "Root resource request with no filename in uri"
        ); 
        $this->assertEquals (
            '/',
            $this->object->extractApiUri("/api/v1/index.php/", "/api/v1/index.php"),
            "Root resource request with filename in uri"
        ); 
        $this->assertEquals (
            '/users/56/report',
            $this->object->extractApiUri("/api/v1/users/56/report", "/api/v1/index.php"),
            "Multi-level resource path"
        ); 
    }

}

